default:

  add_collection_type:
    name: add_collection_type
    description: >
      Add a collection type to the database. This allows the AI to define a collection (using a schema),
      that will be automatically created, and perform CRUD operations on that collection
    inputSchema:
      type: object
      properties:
        collection:
          type: string
          description: |
            The 'collection' parameter must be a stringified JSON object with properly escaped special
            characters within string values, including the following properties:
            "id", "name", "collection_name", "description" and "schema".

            The schema property should follow the JSON Schema format defined by: "type", "properties" and
            "required" attributes. The schema can be shaped as needed although including a "summary" field
            of type string is mandatory. An "_id" UUID is autogenerated on insert, so adding an "id" field
            is optional. However, including an "id" field is recommended as deletion can only be done by
            "_id" or "id".

            Example:
              {
                "id": "products",
                "name": "Products",
                "collection_name": "products",
                "description": "Store product information",
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": { "type": "string" },
                    "summary": {
                      "type": "string",
                      "description": "A concise description of the topic and conclusion"
                    },
                    "name": { "type": "string" },
                    "price": { "type": "number" },
                    "description": { "type": "string" },
                    "inStock": { "type": "boolean" }
                  },
                  "required": ["id", "name", "price", "summary"]
                }
              }
      required:
        - collection

  add_batch_to_collection:
    name: add_batch_to_collection
    description: Add one or more documents to a collection with schema validation in a single operation.
    inputSchema:
      type: object
      properties:
        collection_name:
          type: string
          description: Name of the collection to add the documents to.
        documents:
          type: string
          description: >
            JSON string containing an array of documents to add to the collection.

            Each document must match the collection's schema. To ensure successful saving, always
            provide data to the MCP server in valid JSON format, remembering to properly escape
            special characters within string values.

            If you have trouble inserting multiple documents due to errors, try inserting a single
            document until you get it right, then add the rest.

            When adding large text values, it is encouraged to use Markdown format for better
            readability. Use only standard Markdown. Maximum header size is "##".
      required:
        - collection_name
        - documents

  delete_from_collection:
    name: delete_from_collection
    description: Delete documents from a collection by matching either MongoDB's "_id" or a custom "id" field.
    inputSchema:
      type: object
      properties:
        collection_name:
          type: string
          description: Name of the collection to delete documents from.
        attribute:
          type: string
          description: Must be either '_id' or 'id' (if 'id' is present on the schema)
          enum:
            - _id
            - id
        value:
          type: string
          description: Value of the _id or id to match for deletion
      required:
        - collection_name
        - attribute
        - value

  collection_summary:
    name: collection_summary
    description: >
      Get a summary of all records in a collection, showing their "_id" and "summary" fields. When
      you have no idea about the contents of a collection, use this to get an overview instead of
      fetching individual records to find out. Always try to limit the number tokens used in your tasks.
    inputSchema:
      type: object
      properties:
        collection_name:
          type: string
          description: Name of the collection to summarize
      required:
        - collection_name

  get_from_collection:
    name: get_from_collection
    description: Retrieve documents from a collection with filtering capabilities
    inputSchema:
      type: object
      properties:
        collection_name:
          type: string
          description: Name of the collection to retrieve documents from
        type:
          type: string
          description: "Type of query to perform: value (loose match), value_exact (exact match), range (get latest n records), or count (get total count)"
          enum:
            - value
            - value_exact
            - range
            - count
        attribute:
          type: string
          description: Name of the attribute to filter on (required if type is 'value' or 'value_exact')
        value:
          type: string
          description: Value to match against the specified attribute (required if type is 'value' or 'value_exact')
        range:
          type: number
          description: Number of recent records to retrieve (used when type is 'range')
          default: 30
      required:
        - collection_name
        - type

  get_resource_data:
    name: get_resource_data
    description: |
      Returns available collections data.

      Note:
        This tool is only needed if your client does not support MCP resource discovery. If your
        client supports resource discovery, please use the standard resource endpoints instead.

      Server Description:
        AI-powered data collection manager enabling autonomous data operations with dynamic schemas.
        Key capabilities:
        - Persist data across conversations
        - Create and manage structured collections on-the-fly
        - Perform CRUD operations with schema validation
        Ideal for:
        - Knowledge bases: Organize information from conversations
        - Project tracking: Manage tasks, statuses, and deadlines
        - Learning content: Track progress and generate quizzes
        Best practice: Consider if current information might be valuable in future conversations -
        if unsure, ask the user about storing it.
    inputSchema:
      type: object
      properties: {}
      required: []
